(require 'test-unit)
(load-file "../dbgr/bp.el")

(test-unit-clear-contexts)

(context "breakpoints"
	 (tag bp)
	 (specify "breakpoint reset"
		  (dbgr-bp-remove-icons (point-min) (point-max))
		  (assert-equal 0 (length (overlays-in (point-min) (point-max)))
				"Should not have any breakpoints in buffer")
		  )
	 (specify "breakpoint set"
		  (dbgr-bp-put-icon (point-min) 't 1)
		  (dbgr-bp-put-icon (point-max) nil 2)
		  (assert-equal 2 (length (overlays-in (point-min) (point-max)))
				"Should find breakpoints in buffer")
		  (let* ((ov-list (overlays-in (point-min) (point-min)))
			 (ov (car-safe ov-list))
			 (before-string)
			 )
		    (assert-equal 1 (length ov-list)
				  "Should find 1 breakpoint at (point-min)")
		    (setq before-string (overlay-get ov 'before-string))
		    (assert-equal 1 (get-text-property 0 'dbgr-bptno before-string)
				  "Should find breakpoint number 1 in overlay's before-string")
		    (assert-equal t (get-text-property 0 'enabled before-string)
				  "Breakpoint 1 should be enabled")
		    )
		  (let* ((ov-list (overlays-in (point-max) (point-max)))
			 (ov (car-safe ov-list))
			 (before-string)
			 )
		    (assert-equal 1 (length ov-list)
				  "Should find 1 breakpoint at (point-max)")
		    (setq before-string (overlay-get ov 'before-string))
		    (assert-equal 2 (get-text-property 0 'dbgr-bptno before-string)
				  "Should find breakpoint number 1 in overlay's before-string")
		    (assert-equal nil (get-text-property 0 'enabled before-string)
				  "Breakpoint 1 should be disabled")
		    )
		  )
	 )

(test-unit "bp")
